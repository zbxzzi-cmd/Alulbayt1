<analysis>
The trajectory details the development of the Ahlulbayt Studies seminary management platform, led by an AI engineer. Initially, the focus was on establishing the core backend (authentication endpoints, JWT, user registration, login, password recovery) and a foundational React landing page. A critical shift occurred when the user mandated an admin-editable design system and a comprehensive light/dark mode, which became the central theme for numerous UI/UX iterations.

The AI successfully implemented a sophisticated CSS variable-based design system, glassmorphism effects, animated backgrounds, and a highly customizable theme toggle. However, this phase was characterized by frequent bug reports from the user, primarily related to CSS specificity conflicts, element layering, and theme consistency across various components like program cards and backgrounds. The AI consistently addressed these issues by applying maximum CSS specificity (,  selectors) and refining JavaScript to be theme-aware.

The latest development involves building an Admin Tab Management System to allow admins to add/edit/delete program and stat tabs directly from the welcome page. This feature has introduced new UI challenges, specifically with the modal overlay's z-index, transparency, and button visibility. The AI is currently engaged in a complete rewrite of the  component to resolve these persistent layering and styling issues, along with addressing related ESLint errors. The overall work demonstrates an iterative development process with a strong emphasis on achieving precise UI/UX requirements.                                                                                                                                                                  **Critical Issues Requiring Fix:**
Admin Tab Management System Problems:
• Modal Z-index & Overlay Issues: Modal dialog appears behind content, buttons completely obscured
• Theme Incompatibility: New admin elements don't adapt to light/dark themes properly  
• Form Functionality: Unable to save new program tabs due to UI/backend integration issues
• Visual Design Mismatch: Admin controls don't match established cosmic purple theme
</analysis>
<product_requirements>
The Ahlulbayt Studies platform aims to digitally manage a religious seminary's operations, serving administrators/teachers and students.
**Phase 1 (MVP) Requirements:**
1.  **Landing Page**: A visually appealing welcome page showcasing programs in rounded-edge cards. Each card displays Program Name, Themed Logo/Image, Tagline, and two buttons: Program Overview (opens a modal) and Enroll Now (redirects to login/signup).
2.  **Authentication & User Management**: Secure registration/login. Super admin pre-registration (zbazzi199@gmail.com). Admin sign-up requires a configurable code. **Student enrollment no longer requires admin approval; it's automatically active.** Password recovery is essential. Users redirect to role-specific dashboards post-login.
3.  **Admin Dashboard**: Central dashboard showing programs in card layout, with an Add New Program button.
4.  **Student Dashboard**: Streamlined view of available and enrolled programs.
5.  **UI/UX Design**: Modern, clean, minimalist, fully responsive. **All edges and corners must be rounded**. Light color palette, evolving to a cosmic purple dark mode. All text and design elements, including colors and gradients, must be **admin-editable** via a CMS/DesignSettings system.**Design System Requirements:**
• All edges must be rounded - no straight edges anywhere
• Theme-aware components: All new elements must automatically adapt to both light and dark themes
• Cosmic purple theme: Primary color scheme with proper gradients
• Glassmorphism effects: Especially in dark mode with backdrop blur
• Admin-editable design: All text/content must be editable via UI without code changes
</product_requirements>
<key_technical_concepts>
-   **Tech Stack**: React.js (Frontend), FastAPI (Backend), MongoDB (Database).
-   **Styling**: Tailwind CSS, Shadcn/ui components, custom CSS variables.
-   **Authentication**: JWT, bcrypt, UUIDs.
-   **Theming**: Light/Dark mode via  attribute, .
-   **Frontend State**: React Context for auth and theme.
</key_technical_concepts>
<code_architecture>

-   ****: The central FastAPI application. It contains API routes for user authentication (, , , ), content display (), a theme testing endpoint (), and CRUD operations for  and  models (, ). It interacts with MongoDB, handles password hashing with bcrypt, and generates JWT tokens using UUIDs.
-   ****: Defines Pydantic models for data structures used in the backend. This includes , ,  (for program details: title, description, image, theme-aware border colors), and  (for statistics: title, value, theme-aware border colors). These models ensure data validation and consistent schema for MongoDB interactions.
-   ****: The main React component acting as the application's entry point and router. It manages global states such as the current theme, CMS-editable content (like border thickness, background color, font color), and user authentication status. It conditionally renders the  and  components based on user role. This file has undergone extensive modifications to integrate the custom design system, light/dark mode functionality, and admin UI controls.
-   ****: The primary stylesheet, central to the application's visual design. It defines a comprehensive CSS variable-based design system, applying rules for rounded edges, glassmorphism, animated background particles, and responsive adjustments. It uses  for dark mode-specific styles and  rules to enforce high CSS specificity, addressing numerous UI bug fixes throughout the development.
-   ****: A dedicated React component for switching between light and dark modes. It utilizes  to persist the user's theme preference and features a visually updated sun/moon icon with purple gradients for dark mode.
-   ****: A React component intended for admin users, allowing them to manage program and stat tabs (add, edit, delete). It presents a modal interface for inputting tab details, including title, description, image URL, and separate border colors for light and dark modes. This component is currently undergoing significant refactoring to resolve critical UI issues related to modal layering and theme integration.
</code_architecture>
<pending_tasks>
**URGENT PRIORITY - Admin Tab System Fixes:**
• **Modal Overlay Issues**: Fix z-index so modal appears as topmost layer with proper backdrop blur
• **Button Visibility**: Ensure Cancel/Save buttons are never obscured by other elements  
• **Theme Compatibility**: All admin components must automatically adapt to light/dark themes
• **Form Functionality**: Ensure program tabs can actually be created and saved successfully
• **Visual Consistency**: Add New Program button must match Enroll Now button styling exactly-   **Frontend Authentication (Micro-Steps 3.2 - 3.4)**:
    -   Set up React Context for user login state and protected routes.
    -   Build Login/Signup UI components using the formalized design system.
    -   Integrate authentication forms with existing backend APIs.
-   **Admin Tab Management System UI**: Complete the ongoing fixes to  to ensure the modal functions correctly without overlapping, with proper background blur, and theme consistency.
</pending_tasks>
<current_work>
**USER-REPORTED CRITICAL ISSUES:**
The current AdminControls implementation has severe UI problems:
• Modal dialog appears transparent and behind other content
• Cancel/Save buttons completely covered and unusable  
• Theme switching not working for admin interface elements
• Form submission fails to create actual program tabs

**Despite technical progress on component structure, these user-facing issues must be resolved immediately before any further development.**Immediately prior to this summary, the AI engineer was deep into fixing critical UI issues within the 's modal, as implemented in . The user reported that the modal was transparent, its content (buttons, text fields) was being covered by the Our Programs section, and the Cancel and Save buttons were completely obscured. This indicated persistent , transparency, and layering problems, along with inconsistent theme application for the admin interface.

The AI's approach involved a Complete Rewrite of the  component. The goal of this rewrite is to:
1.  Ensure the modal pops up as the topmost layer, clearly visible without any UI overlap.
2.  Apply a solid, opaque background to the modal form.
3.  Implement a  to visually separate the modal from the background content.
4.  Integrate the admin panel's styling to match the established purple cosmic theme (purple gradients, appropriate borders, white text, purple-themed interactive elements).

During this rewrite, ESLint errors (e.g., Parsing error: Duplicate export default, Parsing error: import and export may only appear at the top level) were encountered and are being resolved. The latest actions involved fixing the file structure of  and adding theme-aware CSS rules to  specifically for the  component to ensure its styling correctly follows the cosmic theme.
</current_work>
<optional_next_step>
Resolve the remaining ESLint errors and CSS issues in  to ensure the modal displays correctly with proper layering and theme integration.**Next Development Phase:**
**Development Sequence After Emergency Fixes:**
1. **First**: Complete authentication (Micro-Steps 3.2-3.4) - REQUIRED before dashboard work
2. **Then**: Admin dashboard implementation  
3. **Then**: Student dashboard development
4. **Finally**: Comprehensive theme testing across all components

**Critical Constraints:**
• No automated tests - manual testing only to conserve credits
• Admin signup requires code: AHLULBAYT2025
• Super admin: zbazzi199@gmail.com (pre-registered)
• JWT tokens must use MongoDB _id as string
</optional_next_step>
